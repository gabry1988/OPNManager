name: Build Android APK (Optimized Fast Cache)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  ANDROID_HOME: /usr/local/lib/android/sdk
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
  NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
  TAURI_SKIP_DEVSERVER: true
  CARGO_TERM_COLOR: always

jobs:
  # ðŸ§° Job opzionale per pre-popolare la cache
  populate-cache:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add cargo bin to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Rust Android targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi

      # ðŸ¦€ Install and cache Tauri CLI
      - name: Cache Tauri CLI
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Install Tauri CLI
        run: |
          if [ ! -f ~/.cargo/bin/cargo-tauri ]; then
            cargo install tauri-cli --locked
          fi
          cargo tauri --version

      # ðŸ“± Cache Android SDK/NDK
      - name: Cache Android SDK & NDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Install Android cmdline-tools if not cached
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            cd "$ANDROID_SDK_ROOT/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
            unzip -q cmdline-tools.zip
            mv cmdline-tools latest
            rm cmdline-tools.zip
          fi
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Install Android SDK & NDK components
        run: |
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"

  # ðŸ§° Setup principale per build normali
  setup:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Cache cargo & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Add cargo bin to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Rust Android targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi

      - name: Cache Tauri CLI
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Install Tauri CLI if not cached
        run: |
          if [ ! -f ~/.cargo/bin/cargo-tauri ]; then
            echo "ðŸ“¥ Installing Tauri CLI..."
            cargo install tauri-cli --locked
          else
            echo "âœ… Tauri CLI giÃ  presente nella cache"
          fi
          cargo tauri --version

      - name: Cache Android SDK & NDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Install Android cmdline-tools if not cached
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            cd "$ANDROID_SDK_ROOT/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
            unzip -q cmdline-tools.zip
            mv cmdline-tools latest
            rm cmdline-tools.zip
          fi
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Install Android SDK & NDK components
        run: |
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"

  build-frontend:
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install deps & build
        run: |
          npm ci
          npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist

  build-debug:
    runs-on: ubuntu-22.04
    needs: [setup, build-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Restore Tauri CLI cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Add cargo bin to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Add Android cmdline-tools to PATH
        run: echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist

      - name: Build Android Debug
        run: |
          if [ -f ~/.cargo/env ]; then source ~/.cargo/env; fi
          cargo tauri android build --debug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-debug-apk
          path: src-tauri/gen/android/app/build/outputs/apk/debug/*.apk

  build-release:
    runs-on: ubuntu-22.04
    needs: [setup, build-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Restore Tauri CLI cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Add cargo bin to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Add Android cmdline-tools to PATH
        run: echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist

      - name: Generate release keystore
        run: |
          keytool -genkeypair -v -keystore release-key.jks -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android -dname "CN=OPNManager, OU=Dev, O=Dev, L=City, ST=State, C=US" \
            -alias opnmanager

      - name: Build Android Release
        run: |
          if [ -f ~/.cargo/env ]; then source ~/.cargo/env; fi
          cargo tauri android build --release -- \
            --signing-key release-key.jks \
            --alias opnmanager \
            --storepass android \
            --keypass android

      - name: Rename APK
        run: |
          TAG_NAME=${GITHUB_REF_NAME}
          APK_DIR="src-tauri/gen/android/app/build/outputs/apk/release"
          APK_FILE=$(ls "$APK_DIR"/*.apk | head -n 1)
          NEW_NAME="OPNManager-${TAG_NAME}-release.apk"
          mv "$APK_FILE" "$APK_DIR/$NEW_NAME"
          echo "RENAMED_APK=$APK_DIR/$NEW_NAME" >> $GITHUB_ENV

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-release-apk
          path: ${{ env.RENAMED_APK }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RENAMED_APK }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build Android APK (Optimized)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
      TAURI_SKIP_DEVSERVER: true
      CARGO_TERM_COLOR: always

    steps:
      # ---------------------
      # 📥 Checkout
      # ---------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------------------
      # 🦀 Cache Rust
      # ---------------------
      - name: Cache cargo & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      # Cache rustup toolchains (per evitare di riscaricare i target)
      - name: Cache Rust targets
        uses: actions/cache@v4
        with:
          path: ~/.rustup/toolchains
          key: ${{ runner.os }}-rust-targets-v1

      # ---------------------
      # 📦 Cache Node modules
      # ---------------------
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install npm dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      # ---------------------
      # 🧰 Cache Tauri CLI
      # ---------------------
      - name: Cache Tauri CLI
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri CLI if not cached
        run: |
          if [ ! -f ~/.cargo/bin/cargo-tauri ]; then
            echo "Installing Tauri CLI..."
            cargo install tauri-cli --locked
          else
            echo "✅ Tauri CLI già in cache"
          fi

      - name: Add Rust targets for Android
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android

      # ---------------------
      # 🤖 Cache Android SDK
      # ---------------------
      - name: Cache Android SDK & NDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Install Android SDK cmdline-tools if not cached
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            echo "📥 Installing Android cmdline-tools..."
            mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
            cd $ANDROID_SDK_ROOT/cmdline-tools
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
            unzip cmdline-tools.zip
            mv cmdline-tools latest
            rm cmdline-tools.zip
          else
            echo "✅ Android SDK già in cache"
          fi
          echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_ENV

      - name: Install Android SDK & NDK components
        run: |
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"

      # ---------------------
      # 🧱 Build
      # ---------------------
      - name: Make gradlew executable
        run: chmod +x src-tauri/gen/android/gradlew

      - name: Build Android APK (Debug)
        run: |
          source $HOME/.cargo/env
          cargo tauri android build --debug

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-debug-apk
          path: src-tauri/gen/android/app/build/outputs/apk/debug/*.apk

      # ---------------------
      # 🔐 Firma + Release
      # ---------------------
      - name: Generate release keystore
        run: |
          keytool -genkeypair -v -keystore release-key.jks -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android -dname "CN=OPNManager, OU=Dev, O=Dev, L=City, ST=State, C=US" \
            -alias opnmanager

      - name: Build Android APK (Release Signed)
        run: |
          source $HOME/.cargo/env
          cargo tauri android build --release -- \
            --signing-key release-key.jks \
            --alias opnmanager \
            --storepass android \
            --keypass android

      # ---------------------
      # 🏷️ Rinomina APK
      # ---------------------
      - name: Rename release APK
        run: |
          TAG_NAME=${GITHUB_REF_NAME}
          APK_DIR="src-tauri/gen/android/app/build/outputs/apk/release"
          APK_FILE=$(ls $APK_DIR/*.apk | head -n 1)
          NEW_NAME="OPNManager-${TAG_NAME}-release.apk"
          mv "$APK_FILE" "$APK_DIR/$NEW_NAME"
          echo "RENAMED_APK=$APK_DIR/$NEW_NAME" >> $GITHUB_ENV

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-release-apk
          path: ${{ env.RENAMED_APK }}

      # ---------------------
      # 🚀 Crea la Release GitHub
      # ---------------------
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RENAMED_APK }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

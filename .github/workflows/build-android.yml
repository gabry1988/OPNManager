name: Build Android APK (Optimized Fast)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  ANDROID_HOME: /usr/local/lib/android/sdk
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
  NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
  TAURI_SKIP_DEVSERVER: true
  CARGO_TERM_COLOR: always
  PATH: ${{ env.PATH }}:/home/runner/.cargo/bin

jobs:

  # -----------------------------------------
  # 🧰 SETUP
  # -----------------------------------------
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install npm dependencies
        run: npm ci

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust Android targets
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi

      - name: Install Tauri CLI
        run: |
          cargo install tauri-cli --locked
          cargo tauri --version

      - name: Cache Android SDK & NDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Install Android SDK cmdline-tools if not cached
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
            cd $ANDROID_SDK_ROOT/cmdline-tools
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
            unzip cmdline-tools.zip
            mv cmdline-tools latest
            rm cmdline-tools.zip
          fi
          echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_ENV

      - name: Install Android SDK & NDK components
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/ndk/25.2.9519653" ]; then
            echo "📥 Installing Android SDK & NDK..."
            yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
            sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"
          else
            echo "✅ Android SDK & NDK already installed. Skipping."
          fi

  # -----------------------------------------
  # 🧪 BUILD FRONTEND
  # -----------------------------------------
  build-frontend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build frontend
        run: npm run build
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: build

  # -----------------------------------------
  # 📱 BUILD DEBUG
  # -----------------------------------------
  build-debug:
    runs-on: ubuntu-latest
    needs: [setup, build-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🧪 Precheck Environment
        run: |
          echo "🔍 Checking Rust env..."
          if [ -f ~/.cargo/env ]; then source ~/.cargo/env; fi
          rustup target list --installed | grep -q aarch64-linux-android || (echo "❌ Missing aarch64 target" && exit 1)
          rustup target list --installed | grep -q armv7-linux-androideabi || (echo "❌ Missing armv7 target" && exit 1)

          echo "🔍 Checking Tauri CLI..."
          if ! command -v cargo-tauri &> /dev/null; then
            echo "Installing cargo-tauri..."
            cargo install tauri-cli --locked
          fi
          cargo tauri --version

          echo "🔍 Checking Android SDK..."
          [ -d "$ANDROID_SDK_ROOT/platforms/android-34" ] || (echo "❌ Missing Android SDK 34" && exit 1)
          [ -d "$ANDROID_SDK_ROOT/ndk/25.2.9519653" ] || (echo "❌ Missing NDK" && exit 1)
          [ -d "$ANDROID_SDK_ROOT/build-tools/34.0.0" ] || (echo "❌ Missing build-tools" && exit 1)
          echo "✅ Precheck passed."

      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build

      - name: Build Android Debug
        run: |
          if [ -f ~/.cargo/env ]; then
            source ~/.cargo/env
          fi
          cargo tauri android build --debug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-debug-apk
          path: src-tauri/gen/android/app/build/outputs/apk/debug/*.apk

  # -----------------------------------------
  # 🔐 BUILD RELEASE
  # -----------------------------------------
  build-release:
    runs-on: ubuntu-latest
    needs: [setup, build-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🧪 Precheck Environment
        run: |
          echo "🔍 Checking Rust env..."
          if [ -f ~/.cargo/env ]; then source ~/.cargo/env; fi
          rustup target list --installed | grep -q aarch64-linux-android || (echo "❌ Missing aarch64 target" && exit 1)
          rustup target list --installed | grep -q armv7-linux-androideabi || (echo "❌ Missing armv7 target" && exit 1)

          echo "🔍 Checking Tauri CLI..."
          if ! command -v cargo-tauri &> /dev/null; then
            echo "Installing cargo-tauri..."
            cargo install tauri-cli --locked
          fi
          cargo tauri --version

          echo "🔍 Checking Android SDK..."
          [ -d "$ANDROID_SDK_ROOT/platforms/android-34" ] || (echo "❌ Missing Android SDK 34" && exit 1)
          [ -d "$ANDROID_SDK_ROOT/ndk/25.2.9519653" ] || (echo "❌ Missing NDK" && exit 1)
          [ -d "$ANDROID_SDK_ROOT/build-tools/34.0.0" ] || (echo "❌ Missing build-tools" && exit 1)
          echo "✅ Precheck passed."

      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build

      - name: Generate release keystore
        run: |
          keytool -genkeypair -v -keystore release-key.jks -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android -dname "CN=OPNManager, OU=Dev, O=Dev, L=City, ST=State, C=US" \
            -alias opnmanager

      - name: Build Android Release
        run: |
          if [ -f ~/.cargo/env ]; then
            source ~/.cargo/env
          fi
          cargo tauri android build --release -- \
            --signing-key release-key.jks \
            --alias opnmanager \
            --storepass android \
            --keypass android

      - name: Rename APK
        run: |
          TAG_NAME=${GITHUB_REF_NAME}
          APK_DIR="src-tauri/gen/android/app/build/outputs/apk/release"
          APK_FILE=$(ls $APK_DIR/*.apk | head -n 1)
          NEW_NAME="OPNManager-${TAG_NAME}-release.apk"
          mv "$APK_FILE" "$APK_DIR/$NEW_NAME"
          echo "RENAMED_APK=$APK_DIR/$NEW_NAME" >> $GITHUB_ENV

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-release-apk
          path: ${{ env.RENAMED_APK }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RENAMED_APK }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Build Android APK (Optimized Fast)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required packages
        run: sudo apt-get update && sudo apt-get install -y tar unzip

  populate-cache:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache cargo & Tauri CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri CLI if not cached
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          if [ ! -f ~/.cargo/bin/cargo-tauri ]; then
            echo "ðŸ“¦ Installing Tauri CLI..."
            cargo install tauri-cli --locked
          else
            echo "âœ… Tauri CLI already cached"
          fi

      - name: Cache Android SDK & NDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Install Android SDK cmdline-tools if not cached
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            echo "ðŸ“¥ Installing Android cmdline-tools..."
            mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
            cd $ANDROID_SDK_ROOT/cmdline-tools
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
            unzip -q cmdline-tools.zip
            mv cmdline-tools latest
            rm cmdline-tools.zip
          else
            echo "âœ… Android SDK already cached"
          fi
          echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_ENV
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

      - name: Accept Android licenses
        run: yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

      - name: Install Android SDK components
        run: sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

  build-debug:
    runs-on: ubuntu-latest
    needs: populate-cache
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cargo & Tauri CLI cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Restore Android SDK cache
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Build Android Debug APK
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          if [ -f ~/.cargo/env ]; then source ~/.cargo/env; fi
          cargo tauri android build --debug

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-debug-apk
          path: src-tauri/gen/android/app/build/outputs/apk/debug/*.apk

  build-release:
    runs-on: ubuntu-latest
    needs: build-debug
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cargo & Tauri CLI cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-tauri-cli-v2

      - name: Restore Android SDK cache
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Generate release keystore
        run: |
          keytool -genkeypair -v -keystore release-key.jks -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android -dname "CN=OPNManager, OU=Dev, O=Dev, L=City, ST=State, C=US" \
            -alias opnmanager

      - name: Build Android Release APK
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          if [ -f ~/.cargo/env ]; then source ~/.cargo/env; fi
          cargo tauri android build --release -- \
            --signing-key release-key.jks \
            --alias opnmanager \
            --storepass android \
            --keypass android

      - name: Rename Release APK
        run: |
          TAG_NAME=${GITHUB_REF_NAME}
          APK_DIR="src-tauri/gen/android/app/build/outputs/apk/release"
          APK_FILE=$(ls $APK_DIR/*.apk | head -n 1)
          NEW_NAME="OPNManager-${TAG_NAME}-release.apk"
          mv "$APK_FILE" "$APK_DIR/$NEW_NAME"
          echo "RENAMED_APK=$APK_DIR/$NEW_NAME" >> $GITHUB_ENV

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: opnmanager-release-apk
          path: ${{ env.RENAMED_APK }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RENAMED_APK }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

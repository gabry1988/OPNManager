name: Build Android APK (Tauri Optimized)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  ANDROID_HOME: /usr/local/lib/android/sdk
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
  NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
  CARGO_HOME: ~/.cargo
  TAURI_SKIP_DEVSERVER: true
  CARGO_TERM_COLOR: always
  TAURI_CLI_VERSION: 2.8.4

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Rust toolchains
        uses: actions/cache@v4
        with:
          path: ~/.rustup
          key: ${{ runner.os }}-rustup-v1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Android targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android

      - name: Cache Tauri CLI
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-${{ env.TAURI_CLI_VERSION }}

      - name: Install Tauri CLI if needed
        run: |
          if [ -f ~/.cargo/bin/cargo-tauri ]; then
            INSTALLED=$(~/.cargo/bin/cargo-tauri --version | awk '{print $2}')
            if [ "$INSTALLED" = "$TAURI_CLI_VERSION" ]; then
              echo "âœ… Tauri CLI $TAURI_CLI_VERSION giÃ  installato"
              exit 0
            fi
          fi
          echo "ðŸ“¥ Installing Tauri CLI $TAURI_CLI_VERSION..."
          cargo install tauri-cli --locked --version $TAURI_CLI_VERSION

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install npm dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-v2

      - name: Install Android cmdline-tools if needed
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            echo "ðŸ“¥ Installing Android cmdline-tools..."
            mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
            cd $ANDROID_SDK_ROOT/cmdline-tools
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
            unzip cmdline-tools.zip
            mv cmdline-tools latest
            rm cmdline-tools.zip
          else
            echo "âœ… Android cmdline-tools giÃ  in cache"
          fi
          echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_ENV

      - name: Install Android SDK & NDK
        run: |
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-v1

      - name: Make gradlew executable
        run: chmod +x src-tauri/gen/android/gradlew

      - name: Cache keystore
        uses: actions/cache@v4
        with:
          path: release-key.jks
          key: keystore-v1

      - name: Generate keystore if missing
        run: |
          if [ ! -f release-key.jks ]; then
            keytool -genkeypair -v -keystore release-key.jks -keyalg RSA -keysize 2048 -validity 10000 \
              -storepass android -keypass android -dname "CN=OPNManager, OU=Dev, O=Dev, L=City, ST=State, C=US" \
              -alias opnmanager
          fi

  build-debug:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Restore Tauri CLI cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-${{ env.TAURI_CLI_VERSION }}

      - name: Build Debug APK
        run: |
          source $HOME/.cargo/env
          cargo tauri android build --debug

      - name: Upload Debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: OPNManager-Debug
          path: src-tauri/gen/android/app/build/outputs/apk/debug/*.apk

  build-release:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Restore Tauri CLI cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-tauri-cli-${{ env.TAURI_CLI_VERSION }}

      - name: Build Release APK (signed)
        run: |
          source $HOME/.cargo/env
          cargo tauri android build --release -- \
            --signing-key release-key.jks \
            --alias opnmanager \
            --storepass android \
            --keypass android

      - name: Rename APK with version
        run: |
          TAG_NAME=${GITHUB_REF_NAME}
          APK_DIR="src-tauri/gen/android/app/build/outputs/apk/release"
          APK_FILE=$(ls $APK_DIR/*.apk | head -n 1)
          NEW_NAME="OPNManager-${TAG_NAME}-release.apk"
          mv "$APK_FILE" "$APK_DIR/$NEW_NAME"
          echo "RENAMED_APK=$APK_DIR/$NEW_NAME" >> $GITHUB_ENV

      - name: Upload Release artifact
        uses: actions/upload-artifact@v4
        with:
          name: OPNManager-Release
          path: ${{ env.RENAMED_APK }}

  publish:
    runs-on: ubuntu-latest
    needs: [build-debug, build-release]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
